/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Whitelist, WhitelistInterface } from "../Whitelist";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "claimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_merkleProof",
        type: "bytes32[]",
      },
    ],
    name: "whitelistClaim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040527f185622dc03039bc70cbb9ac9a4a086aec201f986b154ec4c55dad48c0a474e2360001b60005534801561003757600080fd5b50610649806100476000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806354703d0c1461003b578063c884ef8314610057575b600080fd5b61005560048036038101906100509190610399565b610087565b005b610071600480360381019061006c9190610370565b610228565b60405161007e919061049f565b60405180910390f35b60003360405160200161009a9190610484565b604051602081830303815290604052805190602001209050610100838380806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505060005483610248565b61013f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610136906104da565b60405180910390fd5b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156101cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c3906104ba565b60405180910390fd5b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550505050565b60016020528060005260406000206000915054906101000a900460ff1681565b600082610255858461025f565b1490509392505050565b60008082905060005b84518110156102ef5760008582815181106102ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508083116102ce576102c783826102fa565b92506102db565b6102d881846102fa565b92505b5080806102e790610553565b915050610268565b508091505092915050565b600082600052816020526040600020905092915050565b600081359050610320816105fc565b92915050565b60008083601f84011261033857600080fd5b8235905067ffffffffffffffff81111561035157600080fd5b60208301915083602082028301111561036957600080fd5b9250929050565b60006020828403121561038257600080fd5b600061039084828501610311565b91505092915050565b600080602083850312156103ac57600080fd5b600083013567ffffffffffffffff8111156103c657600080fd5b6103d285828601610326565b92509250509250929050565b6103ef6103ea8261050b565b61059c565b82525050565b6103fe8161051d565b82525050565b6000610411601c836104fa565b91507f416464726573732068617320616c726561647920636c61696d65642e000000006000830152602082019050919050565b60006104516017836104fa565b91507f41646472657373206e6f742077686974656c69737465640000000000000000006000830152602082019050919050565b600061049082846103de565b60148201915081905092915050565b60006020820190506104b460008301846103f5565b92915050565b600060208201905081810360008301526104d381610404565b9050919050565b600060208201905081810360008301526104f381610444565b9050919050565b600082825260208201905092915050565b600061051682610529565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061055e82610549565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610591576105906105c0565b5b600182019050919050565b60006105a7826105ae565b9050919050565b60006105b9826105ef565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160601b9050919050565b6106058161050b565b811461061057600080fd5b5056fea26469706673582212201c37871f30ff31669def64c16dc4c1c1de404ca230b1f1c185e28cfbd0a57a3364736f6c63430008000033";

type WhitelistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WhitelistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Whitelist__factory extends ContractFactory {
  constructor(...args: WhitelistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Whitelist> {
    return super.deploy(overrides || {}) as Promise<Whitelist>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Whitelist {
    return super.attach(address) as Whitelist;
  }
  connect(signer: Signer): Whitelist__factory {
    return super.connect(signer) as Whitelist__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WhitelistInterface {
    return new utils.Interface(_abi) as WhitelistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Whitelist {
    return new Contract(address, _abi, signerOrProvider) as Whitelist;
  }
}
